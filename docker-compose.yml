version: '3.8'

services:
  # Restaurant Revolution App
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=production
      - PORT=5001
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@db:5432/restaurant_revolution}
      - SESSION_SECRET=${SESSION_SECRET:-your-session-secret-here}
      # OpenTable-Level SMS Configuration
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_FROM_NUMBER=${TWILIO_FROM_NUMBER}
      # Guest Profile & Analytics
      - ENABLE_GUEST_ANALYTICS=${ENABLE_GUEST_ANALYTICS:-true}
      - ENABLE_SMS_NOTIFICATIONS=${ENABLE_SMS_NOTIFICATIONS:-true}
    depends_on:
      - db
      - redis
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    restart: unless-stopped
    networks:
      - restaurant_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=restaurant_revolution
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - restaurant_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d restaurant_revolution"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Session Storage and Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - restaurant_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - restaurant_network

  # CMS (Strapi)
  cms:
    build:
      context: ./cms
      dockerfile: Dockerfile
    ports:
      - "1337:1337"
    environment:
      - NODE_ENV=production
      - DATABASE_CLIENT=postgres
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=strapi_cms
      - DATABASE_USERNAME=user
      - DATABASE_PASSWORD=password
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
      - ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET:-your-admin-jwt-secret}
      - APP_KEYS=${APP_KEYS:-your-app-keys}
      - API_TOKEN_SALT=${API_TOKEN_SALT:-your-api-token-salt}
    volumes:
      - cms_uploads:/app/public/uploads
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - restaurant_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  cms_uploads:
    driver: local
  nginx_logs:
    driver: local

networks:
  restaurant_network:
    driver: bridge